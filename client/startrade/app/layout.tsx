import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Script from 'next/script'
import { cookies } from 'next/headers'
import Navbar from './components/Navbar';
import LightAndDarkModeSwitch from "./components/LightAndDarkModeSwitch";
import ThemeProvider from "./components/ThemeProvider";
import NoFlashOfIncorrectTheme from "./components/NoFlashOfIncorrectTheme";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Read theme cookie on the server so SSR can render with the user's chosen theme
  const cookieStore = await cookies()
  const themeCookie = cookieStore.get ? cookieStore.get('theme') : undefined
  const initialTheme = themeCookie ? themeCookie.value : undefined
  return (
  <html lang="en" className={`theme-transition-disable ${initialTheme ?? ''}`} data-theme={initialTheme ?? undefined}>
      <head>
        <Script id="theme" strategy="beforeInteractive">
          {`(function() {
              // If server already provided a data-theme, don't override it on the client.
              try {
                var existing = document.documentElement.getAttribute('data-theme')
                if (existing) return
              } catch (e) {}

              function getInitialTheme() {
                try {
                  var persistedTheme = localStorage.getItem('theme')
                  if (persistedTheme) return persistedTheme
                } catch (e) {}
                var prefersDark = false
                try {
                  prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
                } catch (e) {}
                return prefersDark ? 'dark' : 'light'
              }
              var theme = getInitialTheme()
              document.documentElement.classList.add(theme)
              document.documentElement.setAttribute('data-theme', theme)
            })()`}
        </Script>
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <NoFlashOfIncorrectTheme />
        <ThemeProvider>
          {/* suppressHydrationWarning: the theme script may modify the document class
              before React hydrates which can cause a benign mismatch; suppress warning here.
              For a production-safe solution, provide server-side theme information (cookie)
              or proxy the theme selection to the server so SSR and client render match. */}
          <div className = "flex">
            <Navbar />
            <div className = "flex flex-col p-2 h-15 w-full">
              <div className = "flex justify-end mb-4">
                <LightAndDarkModeSwitch />
              </div>
              {children}
            </div>
          </div>
        </ThemeProvider>
      </body>
    </html>
  );
}
